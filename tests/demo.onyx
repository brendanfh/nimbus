#load "./../module"

use nimbus {*}
use core.encoding.json
use core {tprintf}

index :: c => {
    logf(.Info, "Headers: {p}", c->request().headers)
    c->json(200, &.{
        foo = "test"
    })
}

@route.{.get, "/multipart"}
(c: Context) {
    c->html(200, #file_contents "./multipart.html")
}

@route.{.post, "/multipart"}
(c: Context) {
    files := c->form_files()
    for file in files {
        logf(.Info, "Filename: {}", file.filename)
        logf(.Info, "Type: {}", file.mimetype)
        logf(.Info, "Size: {}", file.contents.length)
    }
    c->no_content(204)
}

@route.{.get, "/other"}
other :: (c: Context) {
    c->file(200, "text/plain", "./tests/demo.onyx")
}

@route.{.get, "/test/:urlp"}
(c: Context) {
    c->blob(200, "text/plain", tprintf( 
        "result: {}\nquery: {}\n",
        c->param("urlp", u32) ?? 0
        c->query("foo")
    ))
}

@route.{.get, "/data", "api"}
api_data :: (c: Context) {
    c->json(200, &.{
        data = .[1, 2, 3, 4, 5]
    })
}

@route.{.post, "/post_test"}
(c: Context) {
    s := c->form_value("test")
    i := c->form_value("value", i32)

    c->blob(200, "text/plain", tprintf("String: {}\nValue: {}\n", s, i))
}

@route.{.post, "/json_test"}
(c: Context) {
    v := struct { x, y: i32 }
        |> c->json_as()
        |> c->unwrap(400)

    c->blob(200, "text/plain", tprintf("X: {}\nY: {}\n", v.x, v.y))
}

@route.{.get, "/streaming"}
(c: Context) {
    c->write_headers(200)
    
    w := c->writer()
    for 10 {
        w->write_format("i: {}\n", it)
        c->flush()
    }
}

@route.{.post, "/binding/:param_value"}
(c: Context) {
    vars := c->bind(struct {
        @"form:anything"       name: str
        @"json:numbers"        nums: [] i32
        @"query:age"           age: u32
        @"header:content-type" type: str
        @"cookie:C"            cookie: str
        @"param:param_value"   param: str
    })

    logf(.Info, "Variables: {}", vars)

    c->blob(200, "text/plain", tprintf("Hello {}!\n", vars.name))
}

@route.{.get, "/unwrap_result"}
(c: Context) {
    use core {Result}
    r: Result(i32, ? str)
    r = .{ Err = "something went terribly wrong..." }

    v := c->unwrap(r, 400)
    c->blob(200, "text/plain", tprintf("Value: {}", v))
}

@route.{.get, "/service_test"}
(c: Context) {
    // user := c->service(UserService) |> c->unwrap(500)

    vars := c->bind(struct {
        @"service" user: &UserService
    })

    c->blob(200, "text/plain", tprintf("The user's name is {}\n", vars.user.name))
}

@route.{.get, "/cookie_test"}
(c: Context) {
    use core.time

    c->set_cookie("testCookie", "some value", time.gmtime(time.now()->to_epoch() + 7 * 60))
    c->html(200, "<h1>Cookie set.</h1>")
}


UserService :: struct {
    name: str
}

main :: () {
    n := Nimbus.new()

    // n->service_singleton(UserService.{ "Joe" })
    n->service_threaded(c => {
        use core.random
        name := random.string(8, alpha_numeric=true)
        return UserService.{ name }
    })

    n->add(logger(style=.V2))
    n->add(static("/static", "./static"))
    n->add(not_found("text/plain", "Not found."))
    // n->add(CSRF.{})

    n->add_tagged_routes()
    n->get("/", index)
    n->get("/html", c => {
        c->set_header("X-WORKING", "thisisworkingwootwoot")

        c->html(200, """
        <h1>This works!</h1>
        """)
    })

    api := n->group("/api")
    api->add_tagged_routes(group = "api")

    n->serve(8080, .{ thread_count = 0, max_clients = 128 })
}
