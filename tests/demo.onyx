#load "./../module"

use nimbus {*}
use core.encoding.json
use core {tprintf}

index :: c => {
    c->json(200, &.{
        foo = "test"
    })
}

@route.{.get, "/other"}
other :: (c: Context) {
    c->file(200, "text/plain", "./tests/demo.onyx")
}

@route.{.get, "/test/:urlp"}
(c: Context) {
    c->blob(200, "text/plain", tprintf( 
        "result: {}\nquery: {}\n",
        c->param("urlp", u32) ?? 0
        c->query("foo")
    ))
}

@route.{.get, "/data", "api"}
api_data :: (c: Context) {
    c->json(200, &.{
        data = .[1, 2, 3, 4, 5]
    })
}

@route.{.post, "/post_test"}
(c: Context) {
    s := c->form_value("test")
    i := c->form_value("value", i32)

    c->blob(200, "text/plain", tprintf("String: {}\nValue: {}\n", s, i))
}

@route.{.post, "/json_test"}
(c: Context) {
    v := c->json_as(struct { x, y: i32 })
        |> c->unwrap(400)

    c->blob(200, "text/plain", tprintf("X: {}\nY: {}\n", v.x, v.y))
}

main :: () {
    n := Nimbus.new()

    n->before(static("/static", "./static"))

    n->add_tagged_routes()
    n->get("/", index)
    n->get("/html", c => {
        c->set_header("X-WORKING", "thisisworkingwootwoot")

        c->html(200, """
        <h1>This works!</h1>
        """)
    })

    n->after(c => {
        if !c->_response().commited {
            c->blob(404, "text/plain", "Not found.")
        }
    })
    n->after(logger(style=.V2))

    api := n->group("/api")
    api->add_tagged_routes(group = "api")

    n->serve(8080, .{ thread_count = 8, max_clients = 256 })
}
