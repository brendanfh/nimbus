package nimbus

Pipeline :: struct {
    steps: [..] Pipe

    free    :: pipeline_free
    add     :: pipeline_add_step
    pipe    :: pipeline_add_step
    process :: pipeline_process
}

Pipe :: struct {
    handler: (data: rawptr, c: Context) -> void
    data: rawptr

    after_commited: bool = false
}

pipeline :: () -> Pipeline {
    p: Pipeline
    p.steps = make(typeof p.steps, allocator=long_term_allocator)
    return p
}

#package
pipeline_free :: (p: &Pipeline) {
    delete(&p.steps)
}

#package
pipeline_add_step :: #match #local {}

#overload
pipeline_add_step :: (p: &Pipeline, s: HTTP_Handler) {
    step := Pipeable.as_pipe(s)
    p.steps << step
}

#overload
pipeline_add_step :: (p: &Pipeline, s: $T/Pipeable) {
    step := Pipeable.as_pipe(s)
    p.steps << step
}

#overload
pipeline_add_step :: (p: &Pipeline, pipe: Pipe) {
    p.steps << pipe
}

#package
pipeline_process :: (p: &Pipeline, c: Context) {
    res := c->_response()

    for& p.steps {
        if !res.commited || it.after_commited {
            it.handler(it.data, c)
        }
    }
}


Pipeable :: interface (T: type_expr) {
    t as T

    { as_pipe(t) } -> Pipe

    as_pipe :: #match {}
}


#overload
Pipeable.as_pipe :: macro (p: &Pipeline) => Pipe.{pipeline_process, p}

#overload
Pipeable.as_pipe :: macro (h: HTTP_Handler) => {
    handler :: (f: &HTTP_Handler, c: Context) {
        (*f)(c)
    }

    f := new(typeof h, allocator=long_term_allocator)
    *f = alloc.copy_closure(h, long_term_allocator)
    return Pipe.{ handler, f }
}
