package nimbus

use core {io, time, Pair}

Response :: struct {
    output: &io.BufferStream
    writer: io.Writer

    headers: [..] Pair(str, str)
    cookies: [..] Cookie
    status: u32

    chunked  := false
    commited := false
}

#package {
    response_init :: (res: &Response) {
        res.writer, res.output = io.string_builder()
    }

    response_free :: (res: &Response) {
        delete(&res.headers)
        delete(&res.cookies)

        delete(&res.writer)
        delete(res.output)
        cfree(res.output)
    }

    response_prepare_for_write :: (res: &Response) {
        if res.commited do return

        // Add the Date header.
        t := time.now()

        buf: [128] u8
        formatted_time := time.strftime(buf, "%a, %d %b %Y %H:%M:%S +0000", &t)
        res.headers->push(.{"Date", formatted_time |> str.copy()})

        res.headers->push(.{"Server", "nimbus/0.0.1"})

        if !res.headers->some([x](x.first == "Content-Type")) {
            res.headers->push(.{"Content-Type", "text/plain"})
        }

        if res.chunked {
            res.headers->push(.{"Transfer-Encoding", "chunked"})

        } else {
            content := str.as_str(res.output)
            res.headers->push(.{"Content-Length", core.tprintf("{}", content.length)})
        }

        // HACK: Right now, we close every connection right away.
        // This is because there are too many issues with trying
        // to properly poll a socket pool for ready connections.
        res.headers->push(.{"Connection", "close"})
    }

    response_write_headers :: (res: &Response, s: &io.Stream) {
        if res.commited {
            logf(.Warning, "attempting to re-write headers of committed response")
            return
        }

        response_prepare_for_write(res)

        w := io.writer_make(s, 0)

        io.write_format(&w, "HTTP/1.1 {} {}\r\n",
            res.status,
            status_code_to_message(res.status))

        for& res.headers {
            io.write_format(&w, "{}: {}\r\n", it.first, it.second)
        }

        for& res.cookies {
            io.write(&w, "Set-Cookie: ")
            cookie_write(it, &w)
            io.write(&w, "\r\n")
        }

        io.write(&w, "\r\n")

        res.commited = true
    }

    response_flush_body :: (res: &Response, s: &io.Stream) {
        contents := str.as_str(res.output)
        defer io.stream_flush(res.output)

        // This is not what chunked is for...
        if res.chunked {
            io.stream_write(s, core.tprintf("{b16}\r\n", contents.length))
            io.stream_write(s, contents)
            io.stream_write(s, "\r\n")

        } else {
            io.stream_write(s, contents)
        }
    }

    response_end :: (res: &Response, s: &io.Stream) {
        if res.chunked {
            io.stream_write(s, "0\r\n\r\n")
        }
    }
}
