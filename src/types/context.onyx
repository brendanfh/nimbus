package nimbus

use core.encoding.json
use core.memory
use core.misc
use core {Result}


Context :: #distinct &_context

#package
_context :: struct {
    nimbus: &Nimbus

    // The allocator for the current context
    allocator: Allocator

    req: &Request
    res: &Response

    // The stream to write the response to
    stream: &io.Stream

    variables: Map(str, any)

    steps: [..] struct {
        steps: &[..] Step
        idx: i32
    }
}

#package
make_context :: (nimbus: &Nimbus, stream: &io.Stream, allocator: Allocator) -> (c: _context) {
    c.req = new(Request, allocator)

    c.res = new(Response, allocator)
    response_init(c.res)

    c.variables = make(Map(str, any), allocator)
    Array.init(&c.steps, 8, allocator)

    c.stream = stream
    c.nimbus = nimbus
    c.allocator = allocator

    return
}

#package
destroy_context :: (c: &_context) {
    Context.flush(~~ c)
    delete(&c.variables)
    delete(&c.steps)

    response_end(c.res, c.stream)

    response_free(c.res)
    request_free(c.req)
}


//
// Request methods
//

/// Returns in interal request object.
/// You will likely not need to use this as all information is accessible using other methods on `Context`.
Context.request :: (self: Context) -> &Request {
    c := cast(&_context) self
    return c.req
}

/// Returns the path of the request.
/// `/foo` in `bar.com/foo`
Context.path :: (self: Context) -> str {
    c := cast(&_context) self
    return c.req.endpoint
}

/// Returns the method of the request.
Context.method :: (self: Context) -> HTTP_Method {
    c := cast(&_context) self
    return c.req.method
}

/// Returns the value of a provided header, if present.
Context.header :: (self: Context, header: str) -> ? str {
    c := cast(&_context) self
    return c.req.headers[header]
}

/// Returns the value of a query parameter, if present.
/// 
/// Provides an overload that allows for quickly converting to a different type.
Context.query :: #match #local {}

#overload
Context.query :: (self: Context, query: str) -> ? str {
    c := cast(&_context) self
    return c.req.query[query]
}

#overload
Context.query :: (self: Context, param: str, $Query_Type: type_expr) -> ? Query_Type {
    c := cast(&_context) self

    value := c.req.query[param]
    value->with([v] {
        return conv.parse_with_allocator(Query_Type, v, c.allocator)
    })
    return .None
}


/// Returns the names of all query parameters.
Context.query_names :: (self: Context) -> [] str {
    c := cast(&_context) self
    return iter.as_iter(&c.req.params)
        |> iter.map(x => x.key)
        |> iter.collect(c.allocator)
}

/// Returns the value of a cookie, if present.
Context.cookie :: (self: Context, cookie: str) -> ? str {
    c := cast(&_context) self
    return c.req.cookies[cookie]
}

/// Returns the value of a URL parameter, if present.
/// 
/// Provides an overload that allows for quickly converting to a different type.
Context.param :: #match #local {}

#overload
Context.param :: (self: Context, param: str, $Param_Type: type_expr) -> ? Param_Type {
    c := cast(&_context) self

    value := c.req.params[param]
    value->with([v] {
        return conv.parse_with_allocator(Param_Type, v, c.allocator)
    })
    return .None
}

#overload
Context.param :: (self: Context, param: str) -> ? str {
    c := cast(&_context) self
    return c.req.params[param]
}


/// Returns the names of all URL parameters.
Context.param_names :: (self: Context) -> [] str {
    c := cast(&_context) self
    return iter.as_iter(&c.req.params)
        |> iter.map(x => x.key)
        |> iter.collect(c.allocator)
}


/// Returns the value of a form parameter, if present.
/// 
/// Provides an overload that allows for quickly converting to a different type.
Context.form_value :: #match #local {}

#overload
Context.form_value :: (self: Context, key: str, $Form_Type: type_expr) -> ? Form_Type {
    c := cast(&_context) self
    value := self->form_value(key)?
    return conv.parse_with_allocator(Form_Type, value, c.allocator)
}

#overload
Context.form_value :: (self: Context, key: str) -> ? str {
    c := cast(&_context) self
    body := request_get_body(c.req)

    form := body.Form?
    return form[key]?[0]
}


/// Returns a `json.Value` of the body of the request, if the body is present and is JSON.
Context.json_raw :: (self: Context) -> ? json.Value {
    c := cast(&_context) self
    body := request_get_body(c.req)
    return body.Json?.root
}

/// When the body of the request is JSON, convert that JSON to a specified type.
Context.json_as :: (self: Context, $T: type_expr) -> ? T {
    val := self->json_raw()?
    return json.as_any(val, T)
}


/// Extract multiple values from multiple sources into a single variable.
///
///     vars := c->bind(struct {
///         @"form:name"           name: str
///         @"json:numbers"        nums: [] i32
///         @"query:age"           age: u32
///         @"header:content-type" type: str
///         @"cookie:session"      session: str
///         @"param:param_value"   param: str
///     })
///
Context.bind :: #match #local {}

#overload
Context.bind :: macro (self: Context, $T: type_expr) -> T {
    t: T
    self->bind(&t)
    return t
}

#overload
Context.bind :: (self: Context, out: any) {
    out2 := misc.any_dereference(out)

    dest := out2.data
    T    := out2.type

    type_info := T->info()->as_struct()
    if type_info.kind != .Struct {
        return
    }

    for &member in type_info.members {
        lookup_opt := member.tags
            |> Slice.find_opt([x](x.type == str))
            |> Optional.transform(x => *misc.any_as(x, str))

        if !lookup_opt do continue

        lookup := lookup_opt!
        kind, identifier := str.bisect(lookup, ':')

        switch kind {
            case "json" {
                // TODO: Add support for JSON Path searches ($.foo[0].bar)
                j := self->json_raw() ?? [] { continue }
                json.as_any(j->get(identifier), member.type, memory.ptr_add(dest, member.offset))
            }

            case "header" {
                value := self->header(identifier) ?? [] { continue }
                extract_var(memory.ptr_add(dest, member.offset), member.type, value)
            }

            case "query" {
                value := self->query(identifier) ?? [] { continue }
                extract_var(memory.ptr_add(dest, member.offset), member.type, value)
            }

            case "cookie" {
                value := self->cookie(identifier) ?? [] { continue }
                extract_var(memory.ptr_add(dest, member.offset), member.type, value)
            }

            case "form" {
                value := self->form_value(identifier) ?? [] { continue }
                extract_var(memory.ptr_add(dest, member.offset), member.type, value)
            }

            case "param" {
                value := self->param(identifier) ?? [] { continue }
                extract_var(memory.ptr_add(dest, member.offset), member.type, value)
            }
        }
    }

    extract_var :: (dest: rawptr, type: type_expr, value: str) {
        if type == str {
            *cast(& str) dest = value
        } else {
            conv.parse_any(dest, type, value)
        }
    }
}


//
// Response methods
//

/// Returns in the internal Response object of the Context.
/// You will likely never need to use this directly.
Context._response :: (self: Context) -> &Response {
    c := cast(&_context) self
    return c.res
}

/// Sets the value of a header for the response.
Context.set_header :: (self: Context, header: str, value: str) {
    c := cast(&_context) self
    c.res.headers->put(header, value)
}

/// Sets the value of a cookie for the response.
Context.set_cookie :: (self: Context, name: str, value: str) {
    c := cast(&_context) self
    c.res.cookies->put(name, value)
}

/// Writes just the headers of the response.
/// You can then use `Context.writer` to get a `io.Writer` to write the body.
Context.write_headers :: (self: Context, code: u32) {
    c := cast(&_context) self
    c.res.status = code
    c.res.chunked = true
    response_write_headers(c.res, c.stream)
}

/// Write a response with no body.
Context.no_content :: (self: Context, code: u32) {
    c := cast(&_context) self
    c.res.status = code
    response_write_headers(c.res, c.stream)
}

/// Write a redirection response.
Context.redirect :: (self: Context, code: u32, uri: str) {
    c := cast(&_context) self

    if code < 300 || code > 308 {
        logf(.Warning, "Invalid HTTP status code for redirection ({}). Using 301 instead.", code)
        code = 301
    }

    c.res.status = code
    c.res.headers["Location"] = uri
    response_write_headers(c.res, c.stream)
    response_flush_body(c.res, c.stream)
}

/// Write a blob response with a given status code and content type.
Context.blob :: (self: Context, code: u32, mimetype: str, content: [] u8) {
    c := cast(&_context) self

    c.res.status = code
    c.res.headers["Content-Type"] = mimetype

    c.res.writer->write(content)

    response_write_headers(c.res, c.stream)
    response_flush_body(c.res, c.stream)
}

/// Write a JSON response using any Onyx type.
Context.json :: (self: Context, code: u32, data: any) {
    c := cast(&_context) self

    // Write the JSON to the response buffer
    json.encode(&c.res.writer, misc.any_dereference(data))

    c.res.status = code
    c.res.headers["Content-Type"] = "application/json"

    response_write_headers(c.res, c.stream)
    response_flush_body(c.res, c.stream)
}

/// Write an HTML response with a status code.
Context.html :: (self: Context, code: u32, html: str) {
    self->blob(code, "text/html", html)
}

/// Write a response from the contents of a file with a status code and content type.
Context.file :: (self: Context, code: u32, mimetype: str, path: str) {
    push_context()

    c := cast(&_context) self
    context.allocator = c.allocator

    self->blob(code, mimetype, os.get_contents(path))
}

/// Returns the internal writer to the response body.
Context.writer :: (self: Context) -> &io.Writer {
    c := cast(&_context) self
    return &c.res.writer
}

/// Sends the contents stored in the response writer.
Context.flush :: (self: Context) {
    c := cast(&_context) self
    response_flush_body(c.res, c.stream)
}




/// Retrieves a previously stored value of a certain type.
Context.get :: (self: Context, key: str, $T: type_expr) -> ? T {
    c := cast(&_context) self
    value := c.variables->get(key)?
    return misc.any_as(value, T) |> Optional.from_ptr()
}

/// Stores a value in the `Context` for later.
Context.set :: (self: Context, key: str, v: any) {
    c := cast(&_context) self

    c.variables->put(
        str.copy(key, c.allocator)
        any_copy(v, c.allocator)
    )
}


/// Helper macro to unwrap an Optional and return a status when it is None.
Context.unwrap :: #match #local {}

#overload
Context.unwrap :: macro (self: Context, value: Result($T, $R), status: u32) -> T {
    switch value {
        case .Ok as v do return v
        case .Err as e {
            self->blob(status, "text/plain", tprintf("Unwrapped Result with error: {}", e))
            return #from_proc
        }
    }
}

#overload
Context.unwrap :: macro (self: Context, value: ? $T, status: u32) -> T {
    switch value {
        case .Some as v do return v
        case .None {
            self->blob(status, "text/plain", "Unwrapped empty Optional.")
            return #from_proc
        }
    }
}


/// Executes the next step in the pipeline.
Context.next :: (self: Context) {
    c := cast(&_context) self

    current_step := c.steps->get_ptr(-1)

    current_step.idx += 1
    defer current_step.idx -= 1

    if current_step.idx > current_step.steps.length {
        logf(.Warning, "Unable to move to next step as this is the last step.")
        return
    }

    switch current_step.steps.*[current_step.idx - 1] {
        case .WithData as h {
            h.func(h.data, self)
        }

        case .NoData as h {
            h(self)
        }
    }
}



#local
push_context :: macro () {
    c := context
    defer context = c
}

#local
any_copy :: (x: any, allocator: Allocator) -> any {
    use runtime.info
    use core.memory

    size := info.get_type_info(x.type).size
    new_data := allocator->alloc(size)
    memory.copy(new_data, x.data, size) 

    return .{ new_data, x.type }
}

