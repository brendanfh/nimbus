package nimbus


Static_File_Router :: struct {
    base_route: str
    base_path:  str
    cache_duration: u32
}

static :: (route, path: str, cache_duration := 3600) -> Static_File_Router {
    return .{ route, path, cache_duration } 
}

#package
static_file_router_handle :: (sf: &Static_File_Router, c: Context) {
    path := c->path()

    if !str.starts_with(path, sf.base_route) {
        c->next()
        return
    }

    file_path := path[sf.base_route.count .. path.count]
    full_path := core.tprintf("{}{}", sf.base_path, file_path)

    stat: os.FileStat
    if !os.file_stat(full_path, &stat) || !os.is_file(full_path) {
        c->no_content(404)
        return
    }

    contents := os.get_contents(full_path)

    c->set_header("Cache-Control", core.tprintf("max-age={}", sf.cache_duration))
    c->set_header("Last-Modified", time.gmtime(stat.modified_time / 1000)->format("%a, %d %b %Y %H:%M:%S GMT"))
    c->blob(200, guess_mime_type(full_path), contents)
}

#overload
ToMiddleware.convert :: macro (sf: &Static_File_Router) => Middleware.{ static_file_router_handle, sf }
