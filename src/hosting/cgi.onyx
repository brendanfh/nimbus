package nimbus

use runtime {info}
use core.os
use core { stdio }

#package
cgi :: (nimbus: &Nimbus, stream: &io.Stream) {
    c := make_context(nimbus, stream, nimbus.allocator)
    
    *c.req = make_request_from_env(stream)
    c.socket = .None

    process_request(nimbus, ~~ &c)
    
    destroy_context(&c)
}

#package
make_request_from_env :: (stream: &io.Stream) -> Request {
    env := os.env_vars()

    req: Request

    req.method = info.enum_value(typeof req.method, env["REQUEST_METHOD"] ?? "")
    req.endpoint = env->get("PATH_TRANSLATED") ?? (env->get("PATH_INFO") ?? "")
    req._processed_endpoint = process_url_to_route_elems(req.endpoint, context.allocator)

    req.address = env["REMOTE_ADDR"]

    for Iterator.from(env) {
        if str.starts_with(it.key, "HTTP_") {
            add_header(&req.headers, str.advance(it.key, 5), it.value)
        }
    }

    add_header(&req.headers, "content-type", env["HTTP_CONTENT_TYPE"] ?? "")
    add_header(&req.headers, "user-agent", env["HTTP_USER_AGENT"] ?? "")
    add_header(&req.headers, "content-length", env["HTTP_CONTENT_LENGTH"] ?? "")

    query_string := env["QUERY_STRING"] ?? ""
    parse_url_encoded_key_value(&req.query, &query_string)
    
    parse_cookies(env["HTTP_COOKIE"] ?? "", &req.cookies)

    req.body_stream = RequestInternal.make_body_stream(
        &req
        new(io.Reader.make(stream))
    )

    return req
}

